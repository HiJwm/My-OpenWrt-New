name: Build-Official-5.10

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
#  schedule:
#    - cron: 3 17 * * 0,4

# 点赞☆Star触发编译
#  watch:
#    types: [started]

jobs:
  Build_x86_Official_510:
    runs-on: ubuntu-20.04
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Official-5.10]
    steps:
    - name: Clone Repository
      uses: actions/checkout@v2

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai" 
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons
        wget -qO - https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh | sed 's/python-/python3-/g' | /bin/bash
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/openwrt/openwrt
        REPO_BRANCH: openwrt-22.03
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/official/op1.sh ./
        chmod +x ./op1.sh && ./op1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../diy/official/op2.sh ./        
        chmod +x ./op2.sh && ./op2.sh       
        echo 'https://static.adguard.com/adguardhome/release/AdGuardHome_linux_${Arch}.tar.gz' > feeds/xiangfeidexiaohuo/luci-app-adguardhome/root/usr/share/AdGuardHome/links.txt
        sed -i "s/DISTRIB_DESCRIPTION='*.*'/DISTRIB_DESCRIPTION='AE86Wrt-X86-r22.03-$(date +%Y%m%d)'/g"  package/base-files/files/etc/openwrt_release
        
    - name: Configuration Customization - Build_x86_Official_510
      env:
        CONFIG_FILE: './configs/official.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        make -j$(nproc) V=s

    - name: preparation before release发布前准备
      run: |
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV  #定义文件日期
        echo "date1=$(date +'%m/%d %Y')" >> $GITHUB_ENV #定义日期1
        echo "date2=$(date +'%m.%d.%H')" >> $GITHUB_ENV #定义日期2
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV
    
    - name: Check space usage 检查空间使用情况
      if: (!cancelled())
      run: df -hT
    
    #- name: Assemble Artifact
    #  id: assemble_artifact
    #  run: |
    #    rm -rf ./Myfile
    #    mkdir -p ./Myfile/
    #    getmd5()
    #    {
    #    md5sum=`md5sum $1`
    #    md5=`echo ${md5sum% *}`
    #    md5=`echo ${md5:0:10}`
    #    }
    #    rom1=openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
    #    getmd5 $rom1
    #    cp -a $rom1 ./Myfile/openwrt-x86-64-generic-squashfs-combined-(date +%Y%m%d)_${md5}-efi.img.gz
    #    rom2=openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz
    #    getmd5 $rom2
    #	 cp -a $rom2 ./Myfile/openwrt-x86-64-generic-squashfs-combined-(date +%Y%m%d)_${md5}.img.gz
               
    - name: Organize files 整理文件

      run: |
        mkdir Myfile
        mv -f openwrt/bin/targets/*/*/{*combined*,*sysupgrade*} ./Myfile/ 2>/dev/null || true
        #cp openwrt/.config  ./Myfile/${{matrix.target}}.config  #发布.config文件，删除#起效
        #cp openwrt/build_dir/target-*/linux-*/linux-*/.config ./Myfile/${{matrix.target}}_kernel.config #发布.config文件，删除#起效
        cd Myfile
        echo "v${{ env.date2 }}" > version.txt
        md5=$((md5sum *squashfs-sysupgrade* || md5sum *squashfs-combined*) | awk '{print $1}') 2>/dev/null
        echo $md5 >> version.txt
        rename -v "s/^openwrt/${{ env.VERSION }}-openwrt/" * || true
        rename -v "s/friendlyarm_//" *gz || true
        echo ${{matrix.target}} >> version.txt
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    
    
    - name: Upload Firmwares
      uses: actions/upload-artifact@main
      with:
        name: ${{matrix.target}}_OpenWrt_firmware_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload config
      uses: actions/upload-artifact@main
      with:
        name: ${{matrix.target}}-${{ env.FILE_DATE }}-config
        path: openwrt/.config
        
    - name: Generate Tag & Release Name
      id: generate_name
      run: |
        release_tag: ${{ env.FILE_DATE }}_${{matrix.target}}
        release_name: ${{ env.date1 }} ${{matrix.target}}
        echo "##[set-output name=release_name;]$release_name"
        echo "##[set-output name=release_tag;]$release_tag"        

    - name: Create Release & Upload
      uses: ncipollo/release-action@v1
      with:
        artifacts: ${{ env.FIRMWARE }}/*
        name: ${{ steps.generate_name.outputs.release_name }}
        tag: ${{ steps.generate_name.outputs.release_tag }}
        token: ${{ secrets.REPO_TOKEN }}
                         
    - name: Upload Aliyun
      run: |  
        cd Myfile
        echo "请自动忽略META-INF文件夹。" > 忽略META-INF文件夹.txt
        jar cf ${{matrix.target}}-${{ env.date1 }}.zip *
        cd ..        
        python diy/aliupload.py --token "${{ secrets.ALIYUN_TOKEN }}" --uploadFloder "OpenWrt/X86-Lite/5.15" --file "Myfile/X86-Lite-5.15-$(date +%Y%m%d).zip"  
                
